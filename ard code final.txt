int sensors [16];
int Rowvalues [3][16];
int relay = 12;
int NormalVal [16];
float intercept = 7.3861452;
float p1 = 0.0004944;
float p2 = 0.0015457;
float p3 = -0.0024079;
float p4 = -0.0004974;
float p5 =  0.0018865;
float p6 = -0.0031790;
float p7 = -0.0030449;
float p8 = 0.0050453;
float p9 = 0.0013676;
float p10 = -0.0062438;
float p11 = -0.0018473;
float p12 = -0.0011270;
float p13 = -0.0096637;
float p14 = 0.0096108;
float p15 = 0.0009228;
float p16 = -0.0027945;

int baselineLightAvg=398;
 
void setup() {

  Serial.begin(9600);
  
  //assgining sensors ports
  for (int i = 0; i < 16; i++){
    sensors[i] =  i;
  }
  //assgining pinModes
 for (int i = 0; i < 16; i++){
    pinMode(sensors[i], INPUT);
  }
 
 
  pinMode(relay, OUTPUT);
 digitalWrite(relay,HIGH);
}

int averageLight(int val []){
    int temp=0;
 
  for (int i = 0; i < 16; i++){
    temp +=  val[i];
  }
   int Average = temp / 16;
   return Average;
    
}

int getMin(int val[]){
  int min=1024;
 
  for (int i = 0; i < 16; i++){
    if (val[i]<min) min=val[i];
  }
  return min;
}

void loop(){ 
  //reading x1-16 data
  // reading 3 rows (each row has data from all 16 photocells.
 for (int ii=0;ii<3;ii++){
  for (int i = 0; i < 16; i++){
  if (analogRead(sensors[i])<900&&analogRead(sensors[i])>10){  
    Rowvalues[ii][i] = analogRead(sensors[i]);
    
  }else{
    Rowvalues[ii][i] =-1;
  }
  }
   

 }
// merge the 3 rows of sensor's data to one row. 
// this is done to eliminate any noice, outlayers and other bad data
int NumberOfErrors=0;
int total=0;
  for (int i = 0; i < 16; i++){
   for (int ii = 0; ii < 3; ii++){
  if (Rowvalues[ii][i] != -1) {
      total=total+Rowvalues[ii][i];
  }else{
      NumberOfErrors++;
  }
  }
  NormalVal[i]=total/(3-NumberOfErrors);
  NumberOfErrors=0;
  total=0;
 }
// end of merge


// lightVariention ajustment 
// The classified has been trained under certain light conditions and will not work if the light conditions change dramatically
// to solve this problem, we use a hardcoded baseline value of the average light, during training (baselineLightAvg). 
// Then we calculate the average light during the operation (opLightAvg). If opLightAvg>baselineLightAvg, -> d=opLightAvg-baselineLightAvg, else if 
// if opLightAvg<=baselineLightAvg, ->d=baselineLightAvg-opLightAvg, 
// and then all the 16 values calculate before - d



  int d=baselineLightAvg-averageLight(NormalVal);

//for(int k=0;k<16;k++){
//NormalVal[k]=NormalVal[k]+d;
  
//}

//Serial.println(GetMin(NormalVal));

//check if person on the machine
if (getMin(NormalVal)>270){

  Serial.println("n");
}else{
// pass the modified sensor's values to the classifier and send the result to the serial 
  Serial.println(movement(NormalVal));
}
  
 
   


  
}

// classifier method
char movement(int arr [16]){
float dir =   intercept + p1 * arr[0] + p2 * arr[1] + p3 * arr[2] + p4 * arr[3] +p5 * arr[4] + p6 * arr[5] + p7 * arr[6] + p8 * arr[7] + p9 * arr[8] + p10 * arr[9] + p11 * arr[10] + p12 * arr[11] + p13 *arr[12] + p14 * arr[13] + p15 * arr[14] + p16 *arr[15]  ;               
char m;
if (dir > 0.7 && dir < 1.3 ){
  m = 'w';
}
else if (dir > 1.7 && dir < 2.3) {
  m= 'd';
  
}
else if (dir > 2.7 && dir < 3.3) {
  m= 'a';
  
}
else if (dir > 3.7 && dir < 4.3) {
  m= 's';
  
}
else if (dir > 4.7 && dir < 5.3) {
  m= 'i';
  
}

  return m;
}



